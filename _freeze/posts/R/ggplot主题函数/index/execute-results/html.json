{
  "hash": "129bd16694ace2ecf731ff6d901843ce",
  "result": {
    "markdown": "---\ntitle: \"ggplot主题函数\"\nsubtitle: \"使用统一的主题，方便调用\"\ntitle-block-banner: false\nauthor: \"舒子豪\"\ndate: today\ncategories: [R,ggplot2,tidyverse]\n---\n\n\n# 1 ggplot2图形语法\n\nggplot2中的gg表示图形语法(grammar of graphic)，这是一个通过\"语法\"来绘图的图形概念。ggplot2主张模块间的协调与分工，整个ggplot的语法框架如图 1所示，主要包括数据绘图部分与美化细节部分。\n\n![图 1 ggplot2语法框架](ggplot2语法框架.png)\n\nggplot2的绘图基本语法结构如图 2所示，其中所需的图表输入信息如下所示：\n\n1. ggplot()：底层绘图函数。Data为数据集，主要是数据框(data.frame)格式的数据集；Mappings变量的视觉通道映射，用来表示变量x和y，还可以用来控制颜色(color)、大小(size)或形状(shape)等视觉通道；Stat表示统计变换，与stat_xxx()相对应，默认为\"identity\"(无数据变换)；Position表示绘图数据系列的位置调整，默认为\"identity\"(无位置调整)。\n\n2. geom_xxx()|stat_xxx()：几何图层或统计变换，比如常见的`geom_point()`(散点图)、`geom_bar()`(柱形图)、`geom_histogram()`(统计直方图)、`geom_boxplot()`(箱型图)、`geom_line()`(折线图)等。通常使用geom_xxx()函数就可以绘制大部分图表，有时候通过设定stat参数可以先实现统计变换。\n\n可选的图表输入信息包括如下5个部分，主要是实现图表的美化与变换等。\n\n1. scale_xxx()：度量调整，调整具体的度量，包括颜色(color)、大小(size)或形状(shape)等，跟Mappings的映射变量相对应；\n\n2. coord_xxx()：坐标变换，默认为笛卡尔坐标系，还包括极坐标系、地理空间坐标系等；\n\n3. facet_xxx()：分面系统，将某个变量进行分面变换，包括按行、列和网格等形式分面绘图；\n\n4. guides()：图例调整，主要包括连续型和离散型两种类型的图例；\n\n5. theme()：主题设定，主要用于调整图表的细节，包括图表背景颜色、网格线的间隔与颜色等。\n\n![图 2 ggplot2绘图的基本语法结构](ggplot2绘图的基本语法结构.png)\n\n# 2 geom_xxx()与stat_xxx()\n\n# 2.1 geom_xxx()：几何对象函数\nR中的`ggplot2`包包含几十种不同的几何对象函数geom_xxx()，以及统计变换函数stat_xxx()。通常主要使用几何对象函数geom_xxx()，只有当绘制图表设计统计变换时，才会使用统计变换函数stat_xxx()，比如绘制带误差线的均值散点图或柱形图等，ggplot2默认使用直角坐标系。\n\n根据函数输入的变量总数与数据类型(连续型或离散型)，可以将大部分函数大致分成3个大类，6个小类，如表 1所示，但是有两类函数没有囊括在此表中。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(cars))\n```\n\n::: {.cell-output-display}\n| speed| dist|\n|-----:|----:|\n|     4|    2|\n|     4|   10|\n|     7|    4|\n|     7|   22|\n|     8|   16|\n|     9|   10|\n:::\n\n```{.r .cell-code}\nkable(head(pressure))\n```\n\n::: {.cell-output-display}\n| temperature| pressure|\n|-----------:|--------:|\n|           0|   0.0002|\n|          20|   0.0012|\n|          40|   0.0060|\n|          60|   0.0300|\n|          80|   0.0900|\n|         100|   0.2700|\n:::\n:::\n\n\n``` r\n# 在使用前请先运行source(\"theme_szh.r\",encoding = \"utf-8\")将该函数调入\n\ntheme_szh <- function(...){\n    theme_bw(...) +\n    theme(\n        text = element_text(family = \"serif\"),\n        rect = element_rect(fill = \"white\"),\n        plot.margin = unit(rep(0.5,4), 'lines'),\n        # 绘图区域\n        panel.background = element_rect(fill = \"transparent\", color = \"transparent\"),\n        panel.border = element_rect(fill = \"transparent\", color = 'black',size = 1.6),\n        # 坐标轴\n        axis.title = element_text(color = 'black', vjust = 0.1),\n        axis.ticks.length = unit(-0.3,\"lines\"), # 刻度\n        axis.title.x = element_text(size = 40, color = \"black\"),\n        axis.title.y = element_text(size = 40, color = \"black\"),\n        axis.text.x = element_text(size = 32, color = \"black\"),\n        axis.text.y = element_text(size = 32, color = \"black\"),\n        axis.ticks = element_line(colour = \"grey20\"),\n        # 图例\n        legend.title = element_text(size = 40, color = \"black\"),\n        legend.key = element_rect(fill = \"transparent\", color = \"transparent\"),\n        legend.text = element_text(color = \"black\",size = 32),\n        # 分面\n        strip.text = element_text(size = 40),\n        strip.background = element_rect(size = 1)\n        )\n}\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}