{
  "hash": "e87f65d74737afd40cdc2ba8fade2b23",
  "result": {
    "markdown": "---\nbook: \n    title: \"ggplot2：数据分析与图形艺术\"\n    subtitle: \"概括ggplot2图形语法，建立主题函数用于直接调用\"\n    title-block-banner: false\n    author: \"舒子豪\"\n    date: today\n    image: \"ggplot2语法框架.png\"\n    categories: [R,ggplot2,tidyverse]\n---\n\n\n# 开始\n\n## 1 引言\n\n### 1.1 欢迎来到ggplot2\nggplot2是用于统计数据图形的R包。与其他图形包不同，ggplot2具有基于图形语法的底层语法，允许通过组合独立组件来组合图形。这使得ggplot2功能强大。你可以创建适合特定问题的图形，而不是局限于预定义的图形集。虽然必须学习语法让人不知所措，但ggplot2的语法实际上很容易学习：有一组简单的核心原则，并且很少有特殊情况。困难的部分是可能需要一点时间才能忘记使用其他工具带来的所有先见。\n\nggplot2提供了漂亮容易绘制的图，可以轻松处理像绘制图例这样的精细细节。事实上，它精心选择的默认值意味着您可以在几秒钟内生成发布质量的图形。但是如果你确实有特殊的格式要求，ggplot2的主题系统可以是使你轻松完成所需的工作。最终，这意味着你可以专注于创建最能揭示数据信息的图表，而不是花费时间使图表看起来漂亮。\n\n## 2 第一步\n\n# 图层\n\n## 引言\n\n## 3 个体几何对象（Individual geoms）\n\n## 4 群组几何对象（Collective geoms）\n\n## 5 统计摘要\n\n## 6 地图\n\n## 7 网格（networks）\n\n## 8 注释\n\n## 9 Arranging plots\n\n# 标度\n\n## 引言\n\n## 10 位置标度和轴\n\n## 11 颜色标度和图例\n\n## 12 其他美学（Other aesthetics）\n\n# 语法\n\n## 13 掌握语法\n\n## 14 逐层绘图\n\n## 15 标度和指南\n\n## 16 坐标系\n\n## 17 Faceting\n\n## 18 主题\n\n# ggplot2扩展\n\n## 19 ggplot2编程\n\n## 20 ggplot2内部结构\n\n## 21 编写ggplot2扩展\n\n## 22 案例研究：弹簧\n\n\n# 引言\n\nggplot2是一个基于图形图层语法用于生成统计或数据图形的R包。图形图层语法基于Wilkinson的图形语法，并在其基础上添加了许多新功能，使得图形更有表现力，并能完美的嵌入到R环境中。\n\n所有的图都由**数据（data）**、可视化的对象和**映射（mapping）**组成，映射是对数据变量如何映射到美学属性的描述。五个映射组件如下：\n\n- **图层（layer）**的作用是生成在图像可以被人感知的对象。**几何元素（geom）**是在图中实际看到的东西：点、线、形状等。**统计变换（stat）**指对数据的计算，如对观察结果进行分箱和计数以创建直方图或拟合线性模型。\n\n- **标度（scale）**：控制数据到图形属性的映射，并且图形上所用的每一个图形属性都对应着一个标度。每个标度都作用于图形中所有数据，以确保从数据到图形属性映射的一致性。\n\n- **坐标（coord）**：可将对象的位置映射到图形平面上。位置通常由两个坐标（x，y）决定，但有时可能需要三个或更多。\n\n- **分面（facet）**：是条件绘图（conditioned plots）和网络绘图（trellised plots）的一般形式，通过它你可以方便地展示数据的不同子集。特别是当验证在不同条件下模型是否保持一致时，分面绘图是一个非常强大的工具。分面可以设定哪些变量可以用来分割数据，以及设定是否应该对位置标度加以限制。\n\n- **主题（theme）**：控制显示的细节，如字体大小和背景颜色。\n\n![图 1 ggplot2语法框架](ggplot2语法框架.png)\n\n# 基本语法\n\n## 用图层构建图像\n\n### 创建绘图对象\n\n`ggplot()`函数有两个主要的参数：**数据**和图形属性**映射**。这两个参数将会被设为绘图的默认参数，只有在新添加的图层里设定了新参数时，默认值才会被修改。参数**数据**指定绘图所用的默认数据集（必须是数据框）；参数**映射**的设定只需要将图形属性和变量名放到函数`aes()`的括号里面即可。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\np <- ggplot(diamonds,aes(carat,price,color = cut))\n```\n:::\n\n\n在这个图形对象在加上图层之前无法显示。\n\n### 图层\n\n最简易的图层为只设定一个几何对象，这是数据可视化的一种方法。如果给图形对象添加一个点几何对象（point geom）就会得到一个散点图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p + geom_point()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n该图层的参数设定可以使用**快捷函数**（short-cut）实现，因为每一个几何对象都对应着一个默认的统计变换喝位置参数，而每一个统计变换都对应着一个默认的几何参数，所以对于一个图层我们只需设定stat或geom参数即可。所有的快捷函数都有相同的类型：\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_xxx(mapping,data, ...,stat,position)\nstat_xxx(mapping,data, ...,geom,position)\n```\n:::\n\n\n它们的参数定义了图层的各种组件：\n\n- `mapping`(可选)：一个图形属性映射，通过`aes()`函数来设定；\n\n- `data`(可选)：一个数据集，它会修改默认的数据集；\n\n- `...`：geom或stat的参数，例如直方图的组距（binwidth）或者loess光滑曲线的带宽（bandwidth）。我们也可以用图形属性作为参数，这样该属性就被设定为一个固定的值，而不是被映射给数据集中的一个变量；\n\n- `geom`或`stat`（可选）：我们可以修改geom默认的stat值，或者stat默认的geom值。它们是一组字符串，包含了将要使用的几何对象或统计变换的名称；\n\n- `position`（可选）：选择一种调整对象的重合方式。\n\n### 数据\n\nggplot2要求数据集必须是一个**数据框**（data frame）。ggplot2会从我们给定的数据框中提取绘图所需要的变量，并生成一个新的数据集，而不是直接在原数据上进行数据变换。\n\n这种限制也方便我们使用相同的代码、不同的数据集绘图，只需要改变数据集即可。在更改数据集时，可以任意改变它的值和维度，但是如果将一个变量从离散型变成连续型或者从连续型变为离散型时，那么也需要改变相应的默认标度。\n\n### 图形属性映射\n\n`aes()`函数用来将数据变量映射到图形中，从而使变量成为可以被感知的图形属性。\n\n**图和图层**\n\n一个图层里设定的图形属性映射只对该图层起作用，因此，除非你修改默认的标度，否则坐标标签以及图例标题都会根据图形对象的默认设置而生成。\n\n**设定和映射**\n\n除了可以将一个图形属性映射到一个变量，也可以在图层的参数里将其设定为一个单一值（如：`color = \"red\"`）。图形属性可以根据观测的不同而变化，但是参数则不行。\n\n**分组**\n\n在ggplot2中，几何对象可以大致分为个体（individual）几何对象和群组（collective）几何对象两大类。个体几何对象对数据框的每一条数据绘制一个可以区别其他个体的图形几何。例如，点几何对象用点来便是每一条观测。相反的群组几何对象用来表示多条观测，它们可以是某个统计摘要的一个结果，或者是几何对象的基础展示。线条和路径介于两者之间：每条线都由许多线段组成，而每条线段又代表两个点。我们该如何来控制哪些观测值用哪种图形元素呢？这就是**分组（group）**图形属性的工作。\n\n图中所有离散型变量的交互作用被设为分组的默认值，通常这样可以正确地给数据分组，但是如果没能正确分组或者图中没有离散型变量，那么就需要自定义分组结构，即将group映射到一个在不同的组有不同取值的变量。当现有的单个变量不能够正确地分组，而两个变量的组合可以正确分组时，可以使用`interaction()`函数。\n\n\n\n\n\nggplot2的绘图基本语法结构如图 2所示，其中所需的图表输入信息如下所示：\n\n1. ggplot()：底层绘图函数。Data为数据集，主要是数据框(data.frame)格式的数据集；Mappings变量的视觉通道映射，用来表示变量x和y，还可以用来控制颜色(color)、大小(size)或形状(shape)等视觉通道；Stat表示统计变换，与stat_xxx()相对应，默认为\"identity\"(无数据变换)；Position表示绘图数据系列的位置调整，默认为\"identity\"(无位置调整)。\n\n2. geom_xxx()|stat_xxx()：几何图层或统计变换，比如常见的`geom_point()`(散点图)、`geom_bar()`(柱形图)、`geom_histogram()`(统计直方图)、`geom_boxplot()`(箱型图)、`geom_line()`(折线图)等。通常使用geom_xxx()函数就可以绘制大部分图表，有时候通过设定stat参数可以先实现统计变换。\n\n可选的图表输入信息包括如下5个部分，主要是实现图表的美化与变换等。\n\n1. scale_xxx()：度量调整，调整具体的度量，包括颜色(color)、大小(size)或形状(shape)等，跟Mappings的映射变量相对应；\n\n2. coord_xxx()：坐标变换，默认为笛卡尔坐标系，还包括极坐标系、地理空间坐标系等；\n\n3. facet_xxx()：分面系统，将某个变量进行分面变换，包括按行、列和网格等形式分面绘图；\n\n4. guides()：图例调整，主要包括连续型和离散型两种类型的图例；\n\n5. theme()：主题设定，主要用于调整图表的细节，包括图表背景颜色、网格线的间隔与颜色等。\n\n![图 2 ggplot2绘图的基本语法结构](ggplot2绘图的基本语法结构.png)\n\n# 2 geom_xxx()与stat_xxx()\n\n# 2.1 geom_xxx()：几何对象函数\nR中的`ggplot2`包包含几十种不同的几何对象函数geom_xxx()，以及统计变换函数stat_xxx()。通常主要使用几何对象函数geom_xxx()，只有当绘制图表设计统计变换时，才会使用统计变换函数stat_xxx()，比如绘制带误差线的均值散点图或柱形图等，ggplot2默认使用直角坐标系。\n\n根据函数输入的变量总数与数据类型(连续型或离散型)，可以将大部分函数大致分成3个大类，6个小类，如表 1所示，但是有两类函数没有囊括在此表中。\n\n|变量数|类型|函数|常用图表类型|\n|------|------|------|------|\n|1|连续型|geom_histogram()、geom_density()、geom_dotplot()、geom_freqpoly()、geom_qq()、geom_area()|统计直方图、<br>核密度估计曲线图|\n| |离散型|geom_bar()|柱形图系列|\n|2|x-连续型<br>y-连续型|geom_point()、geom_area()、geom_line()、geom_jitter()、geom_smooth()、geom_label()、geom_text()、geom_bin2d()、geom_hex()、geom_density2d()、geom_map()、geom_step()、geom_quantile()、geom_rug()|散点图系列、<br>面积图系列、<br>折线图系列、<br>包括抖动散点图、<br>平滑曲线图、<br>文本、<br>标签、<br>二维统计直方图、<br>二维核密度估计图、<br>地理空间图表|\n| |x-离散型<br>y-离散型|geom_boxplot()、geom_violin()、geom_dotplot()、geom_col()|箱型图、<br>小提琴图、<br>点阵图、<br>统计直方图|\n| |x-离散型<br>y-离散型|geom_count()|二维统计直方图|\n|3|x,y,z-连续型|geom_contour()、geom_raster()、geom_tile()|等高线图、<br>热力图|\n\n: 表 1 ggplot2函数的分类\n\n## 2.2 stat_xxx()：统计变换函数\n统计(stat)变换函数在数据被绘制出来之前对数据进行聚合和其他计算。stat_xxx()确定了数据的计算方法。不同方法的计算会产生不同的结果，所以一个stat()函数必须与一个geom()函数对应才能进行数据的计算。\n\n# 3 视觉通道映射\nR语言可用作变量的视觉通道映射参数主要包括color/col/colour、fill、size、angle、linetype、shape、vjust和hjust。有些视觉通道调整参数只适应于类别型变量，比如linetype、shape。\n\n1. `color/col/colour、fill和alpha`的属性都是与颜色相关的视觉通道映射参数。其中color/col/colour是指点(point)、线(line)和填充区域(region)**轮廓**的颜色；fill是指定填充区域(region)的颜色；alpha是指定颜色的透明度，数值范围是从0(完全透明)到1(不透明)。\n\n2. `size`是指点(point)的尺寸或线的(line)宽度，默认单位为pt，可以在geom_point()函数绘制的散点图基础上，添加size的映射，从而实现气泡图的绘制。\n\n3. `angle`是指角度，只有部分几何对象有，如geom_text()函数中文本的摆放角度、geom_spoke()函数中短棒的摆放角度。\n\n4. `vjust和hjust`都是与位置调整有关的视觉通道映射参数。其中，vjust是指**垂直**位置微调，在(0, 1)区间的数字或位置字符串：0=\"buttom\", 0.5=\"middle\", 1=\"top\"，区间外的数字微调比例控制不均；hjust是指**水平**位置微调，在(0, 1)区间的数字或位置字符串：0=\"left\", 0.5=\"center\", 1=\"right\"，区间外的数字微调比例控制不均。\n\n5. `linetype`是指定线条的类型，包括白线(0=\"blank\")、实线(1=\"solid\")、短虚线(2=\"dashed\")、\n点线(3=\"dotted\")、点横线(4=\"dotdash\")、长虚线(5=\"longdash\")、短长虚线(6=\"twodash\")。\n\n6. `shape`是指点的形状，为[0, 25]区间的26个整数，分别对应方形、圆形、三角形、菱形等26种不同的形状，如图 3所示。只有21~26号的点的形状有填充颜色(fill)的属性，其他都只有轮廓颜色(color)的属性。\n\n![图 3 R中ggplot2包可供选择的形状](R中ggplot2包可供选择的形状.png)\n\n# 4 度量调整\n度量用于控制变量映射到视觉对象的具体细节，比如：X轴和Y轴、alpha(透明度)、colour(轮廓色)、fill(填充颜色)、linetype(线形状)、shape(形状)等，它们都有相应的度量函数。\n\n|度量|数值型|类别型|\n|---|------|------|\n|x：X轴度量<br>y：Y轴度量|scale_x/y_continuous()、<br>scale_x/y_log10()、<br>scale_x/y_sqrt()、<br>scale_x/y_reverse()、<br>scale_x/y_date()、<br>scale_x/y_datetime()、<br>scale_x/y_time()|scale_x/y_discrete()|\n|colour：轮廓色度量<br>fill：填充颜色度量|scale_colour/fill_continuous()、<br>scale_fill_distiller()、<br>scale_colour/fill_gradient()、<br>scale_colour/fill_gradient2()、<br>scale_colour/fill_gradientn()|scale_colour/fill_discrete()、<br>scale_colour/fill_brewer()、<br>scale_colour/fill_manual()|\n|alpha：透明度度量|scale_alpha_continuous()|scale_alpha_discrete()、<br>scale_alpha_manual()|\n|linetype：线形状度量| |scale_linetype_discrete()、<br>scale_linetype_manual()|\n|shape：形状度量| |scale_shape()、<br>scale_shape_manual()|\n|size：大小度量|scale_size()、<br>scale_size_area()|scale_size_manual()|\n\n: 表 2 ggplot2常见度量调整函数\n\n# 5 图例\nR ggplot2的`guide_colorbar()/guide_colourbar()`函数用于调整连续变量的图例；`guide_legend()`函数用于离散变量的图例，也可以用于连续变量。\n\nguides()函数将guide_colorbar和guide_legend两种图例嵌套进去，方便映射与处理，如`guides(fill = guide_colorbar())`，对多个图例共同处理的时候尤为有效。另外，我们也可以在scale_xxx()度量中指定guide类型，guide = \"colorbar\"或guide = \"legend\"。\n\n其中，尤为重要的部分是图例位置的设定，R ggplot2 默认是将图例放置在图表的右边(\"right\")，但是我们在最后添加的theme()函数中，用legend.position设定图例的位置。legend.position可以设定为\"right\"、\"left\"、\"bottom\"和\"top\"。\n\n# 6 主题系统\n主题系统包括绘图区背景、网格线、坐标轴线条等图表的细节部分，而图表风格主要是指绘图区背景、网格线、坐标轴线条等的格式设定所展现的效果。ggplot2图表的主题系统的主要对象包括文本(text)、矩形(rect)和线条(line)三大类，对应的函数包括element_text()、element_rect()、element_line()，另外还有 element_blank()表示该对象设置为无，具体如表 3所示。其中，我们使用比较多的系统对象是坐标轴的标签(axis.text.x、axis.text.y)、图例的位置与背景(legend.position和legend.background)。X轴标签(axis.text.x)在绘制极坐标柱形图和径向柱形图时会用于调整X轴标签的旋转角度，Y轴标签(axis.text.y)也会用于时间序列峰峦图的Y轴标签的替换等。\n\n|对象|函数|图形对象整体|绘图区(面板)|坐标轴|图例|分面系统|\n|---|---|-------------|----------|------|----|--------|\n|text|element_text()参数：family、face、colour、size、hjust、vjust、angle、lineheight|plot.title、plot.subtitle、plot.caption| |axis.title、axis.title.x、axis.title.y、axis.text、axis.text.x、axis.text.y|legend.text、legent.text.align、legend.text.title、legend.text.align|strip.text、strip.text.x、strip.text.y|\n|rect|element_rect()参数：colour、size、type|plot.background、plot.sapcing、plot.margin|panel.background、panel.border、panel.spacing| |legend.background、legend.margin、legend.spacing、legend.spacing.x、legend.spacing.y|strip.backgr、ound|\n|line|element_line()参数：fill、colour、size、type| |panel.grid.major、panel.grid.minor、panel.grid.major.x、panel.grid.major.x、panel.grid.minor.x、panel.grid.minor.y|axis.line、axis.line.x、axis.line.y、axis.ticks、axis.ticks.x、axis.ticks.y、axis.ticks.length、axis.ticks.margin| | |\n\n: 表 3 主题系统的主要对象\n\n由于ggplot2主题设置的内部函数及参数非常多，可以直接套用模板或是自己建立主题模板。\n\n``` r\n# 在使用前请先运行source(\"theme_szh.r\",encoding = \"utf-8\")将该函数调入\n\ntheme_szh <- function(...){\n    theme_bw(...) +\n    theme(\n        text = element_text(family = \"serif\"),\n        rect = element_rect(fill = \"white\"),\n        plot.margin = unit(rep(0.5,4), 'lines'),\n        # 绘图区域\n        panel.background = element_rect(fill = \"transparent\", color = \"transparent\"),\n        panel.border = element_rect(fill = \"transparent\", color = 'black',size = 1.6),\n        # 坐标轴\n        axis.title = element_text(color = 'black', vjust = 0.1),\n        axis.ticks.length = unit(-0.3,\"lines\"), # 刻度\n        axis.title.x = element_text(size = 40, color = \"black\"),\n        axis.title.y = element_text(size = 40, color = \"black\"),\n        axis.text.x = element_text(size = 32, color = \"black\"),\n        axis.text.y = element_text(size = 32, color = \"black\"),\n        axis.ticks = element_line(colour = \"grey20\"),\n        # 图例\n        legend.title = element_text(size = 40, color = \"black\"),\n        legend.key = element_rect(fill = \"transparent\", color = \"transparent\"),\n        legend.text = element_text(color = \"black\",size = 32),\n        # 分面\n        strip.text = element_text(size = 40),\n        strip.background = element_rect(size = 1)\n        )\n}\n```",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}