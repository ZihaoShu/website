# 1 引言 {.unnumbered} 

## 1.1 欢迎来到ggplot2 {.unnumbered} 

ggplot2是一个用于绘制统计图形（或称为数据图形）的R包。与其他大多数的图形软件包不同，ggplot2由一套图形语法所支持，允许将独立的图形组件组合起来。这一点使得ggplot2功能非常强大。你可以根据实际问题来定制图形，而不是局限于定义好的统计图形。虽然必须学习语法听起来很困难，但实际上ggplot2的学习只需要掌握一些核心准则以及少许特例，尽管可能需要花费一些时间去忘掉其他图形工具中的一些固有概念。

ggplot2可以绘制出很多美观的图形，同时能避免诸多繁琐的细节，例如添加图例等。实际上，ggplot2内置了一系列的预设图形，因此在大部分的情况下你可以快速的绘制出高质量的图形。如果有特殊的格式要求，也可以使用ggplot2的主题系统来进行调整。这样你可以专注于用创建展示数据的图形，而不是花费更多的时间来调整图形的外观。

ggplot2采用了迭代（iteratively）的设计方式，你可以从绘制原始数据的底层开始，然后不断地添加图形注释和统计汇总结果。这种绘图方式与分析问题中的结构化思维是一致的，它能缩短你“所思”与“所见”的距离。ggplot2还可以帮助学生锻炼结构化地分析思维，进而达到专业的水准。

学习图形语法不仅可以帮助你绘制出熟悉的图形，还可以帮助你绘制出更新、更好的图形。如果没有这一套语法体系，图形的绘制便失去了理论支持，这也就是为什么现有的很多图形软件包只是一系列特例的堆积。例如在base R中，如果你想设计一个新的图形，那么它是由点和线等原始绘图元素构成，因此很难利用现有的图形样式进行组合以生成新的图形部件。在ggplot2中，用于创建新图形的表达式是由高级的图形元素组成的，例如对原始数据以及某些统计变换的展现。这些图形元素可以很方便地与新的数据集以及其他图形进行结合。

本书通过大量示例代码和图形对ggplot2进行了整体的介绍，同时还解释了ggplot2所基于的语法。与其他成熟的系统一样，即使你不了解ggplot2的底层模型，你也可以用它来完成许多工作。当然你了解的越多，使用ggplot2时会越高效。

本书将会从零开始介绍ggplot2的基础语法，因此读者不必担心目前对该语法一无所知；你将会学习到如何利用ggplot2来重新绘制那些你已经很熟悉的图形，以及向你展示如何使用语法创建新的图形类型，并最终使你成为可以自己来构建新的图形组件来扩展这一套语法的专家。

## 1.2 什么是图形语法？{.unnumbered} 
Wikinson创建了一套用来描述统计图形基本特性的语法规则。该语法回答了“什么是统计图形？”这一问题。ggplot2以Wilkinson的语法为基础，将图层作为主要的考察对象，并对其进行调整以嵌入到R中。简而言之，这套语法告诉我们一张统计图形就是从数据到**几何对象**（geometric object，缩写为geom，包括点、线、条形等）的**图形属性**（aesthetic attributes，缩写为aes，包括颜色、形状、大小等）的一个映射。此外图形中还可能包含数据的**统计变换**（statistical transformation，缩写为stat），最后绘制在某个特定的**坐标系**（coordinate system，缩写为coord）中。**分面**（facet，指将绘图窗口划分为若干个子窗口）可以用来生成数据不同子集的图形。一张统计图形就是由上述这些独立的图形部件所组成的。

随着本书内容的推进，语法格式将会被更加详细的解释。以下是对这些图形部件的首次描述，介绍了贯穿全书的一些术语，并概述了每个图形部件的基本作用。如果你现在还不能无法完全理解，你将有更多机会了解图形部件以及它们如何协同工作的。

所有的图形都由**数据（data）**、你想要可视化的信息和一个**映射（mapping）**组成，映射是对数据变量如何映射到图形属性的描述。有五个映射部件：

- **图层（layer）**是几何对象和统计变换的集合。**几何对象（geom）**表示你在图中实际看到的内容（包括点、线、条形等）；**统计变换（stat）**是对数据进行的某种汇总。例如将数据分组计数以创建直方图，或将一个二维的关系用线性模型进行解释。

- **标度（scale）**是将数据中的取值映射到图形空间。例如用颜色、大小或形状来表示不同的取值。展现标度的常见做法是绘制图例和坐标轴（逆映射），使读者可以从图形中读取原始数据。

- **坐标系（coord）**描述了数据是如何映射到图形所在的平面的，它还提供坐标轴和网格线以有助于图表阅读。通常使用的坐标系为笛卡尔坐标系，但也可以使用其他坐标系，包括极坐标和地图投影。

- **分面（facet）**描述了如何将数据分解为各个子集，以及如何对子集作图并联合进行展示。分面也叫做条件作图或网格作图。

- **主题（theme）**控制显示的细节，如字体大小和背景颜色等。虽然在ggplot2中已内置默认主题，但你可能需要查阅其他参考资料才能创建有吸引力的图形。

同样重要的是需要注意图形语法的局限：

- 它没有指出你应该绘制哪一种图形。本书的主旨在提出一种合理的绘制数据图形的过程，因此讨论的重点是如何画出你想要的图形，而不是告诉你应该用哪一种图形。

- 它没有描述交互式的图形，图形语法仅仅描述了静态的图形。在计算机屏幕上显示ggplot2图形和打印在一张纸上本质没有区别。对于动态和交互式图形，可以参阅`ggvis`包或`GGobi`包。

## 1.3 ggplot2包与R中其他图形有什么不同？

R中还有许多其他可用的图形系统：`base`、`grid`、`trellis/lattice`。ggplot2与它们有什么不同？

- 基础图形系统是由Ross Ihaka编写的，这基于他实现S语言图形驱动的经验，同时参照了Chambers et al（1983）。基础图形系统采用的是“纸-笔”的模型：你只能在图形的最顶端进行绘画，而不能修改或删除已有的内容；除了已呈现在屏幕上的图像之外，图形没有其他（用户可控）的表达形式，如层次、结构、元素类型等。基础图形系统能绘制基本的图形元素，又提供了完整图形的工具，其中大部分的函数运行速度很快，但使用范围有限。如果你曾经画过单张的散点图、直方图或一系列箱线图，那么你所用的可能就是基础图形系统。

- 网格图形系统（grid）的开发始于2000年，是一个更加丰富的绘制基本图形元素的系统。它由 Paul Murrell开发，是从其博士的工作衍生出来的。网格系统中的图形对象可以与屏幕上的图像独立出来，并且可以反复修改，其中一系列的视图区（每一个试图区都有其自己的坐标系）可以方便的对图形进行复杂的布局。网格系统只能绘制基本的图形元素，而没有提供创建统计图形的工具。

- lattice软件包由 Deepayan Sarkar开发，它利用网格图形系统实现了Cleveland中提出的lattice图形系统，这是对基础绘图系统的巨大改进。你可以利用lattice软件包方便地进行条件作图，而且其中的一些作图细节（例如图例）会自动地完成。然而，lattice图形系统缺少一个完整地模型，这使得它很进行扩展。lattice图形系统在Sarkar中有详细讨论。

- ggplot2于2005年开始出现，它试图吸取基础绘图系统和lattice绘图系统的优点，并利用一个强大的模型来对这两个系统进行改造。这一模型基于之前所描述的一系列准则，能够创建任何类型的统计图形。ggplot2背后的模型使得用户可以用紧凑的语法轻松地绘制出许多种图形，而且其中独立的图形部件使得图形的可扩展性很强。与lattice类似，ggplot2利用了网格图形系统来进行作图，这意味着你可以在底层对图形的外观进行控制。

- [htmlwigets](http://www.htmlwidgets.org)提供了一个用于从R访问Web可视化工具的通用框架。